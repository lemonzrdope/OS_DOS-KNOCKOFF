; Bootloader code

org 0x7c00  ; Set origin to where BIOS loads the bootloader

BITS 16     ; 16-bit mode

section .text
    global _start

_start:
    ; Bootloader code here
    xor ax, ax              ; Clear ax
    mov ds, ax              ; Set data segment to 0
    mov ss, ax              ; Set stack segment to 0
    mov sp, 0x7C00          ; Set stack pointer

    mov si, welcome_message ; Address of welcome message
    call print_string       ; Print welcome message

    ; Kernel code
    mov ah, 0x0E     ; BIOS teletype
    mov al, 'H'      ; Character to print
    int 0x10         ; Call BIOS

    ; DOS code
section .data
    welcome_message db "Salutations, User. Welcome to BitDos", 0
    prompt_str db ">> ", 0
    prompt_dir_str db " / ", 0
    log_format db "[%s] %s", 0
    msg_invalid_command db "Invalid command! Type 'help' for usage instructions.", 0
    msg_change_dir db "Changed directory to: %s", 0
    msg_prev_dir db "Moved to previous directory.", 0
    msg_root_dir db "Already at root directory.", 0
    msg_next_dir db "Moved to next directory.", 0
    msg_no_next_dir db "No next directory available.", 0
    msg_file_created db "File created.", 0
    msg_file_deleted db "File deleted.", 0
    msg_file_not_found db "File not found.", 0
    msg_dir_created db "Directory created.", 0
    msg_dir_deleted db "Directory deleted.", 0
    msg_dir_not_found db "Directory not found.", 0
    msg_max_files db "Maximum number of files reached.", 0
    msg_max_dirs db "Maximum number of directories reached.", 0
    msg_enter_content db "Enter file content (max 512 characters):", 0
    msg_file_edited db "File edited.", 0
    msg_open_log_error db "Error opening log file!", 0
    msg_log_create_file db "Created file: %s", 0
    msg_log_edit_file db "Edited file: %s", 0
    msg_log_delete_file db "Deleted file: %s", 0
    msg_log_create_dir db "Created directory: %s", 0
    msg_log_delete_dir db "Deleted directory: %s", 0
    msg_log_contents db "Log contents:", 0
    msg_log_end db "End of log.", 0
    msg_log_close db "Closing log file.", 0
    msg_log_cleared db "Log file cleared.", 0
    msg_clear_screen db "Screen cleared.", 0
    help_text db "Commands:", 0
                db " - cd <directory>: Change directory.", 0
                db " - mkdir <name>: Create a directory.", 0
                db " - rm <filename>: Delete a file.", 0
                db " - ls: List files in current directory.", 0
                db " - edit <filename>: Edit a file.", 0
                db " - log: Display log.", 0
                db " - clear: Clear the screen.", 0
                db " - exit: Exit the shell.", 0
                db " - help: Display this help message.", 0
                db 0
    log_buffer resb 512

section .bss
    prompt_buffer resb 256
    log_file resd 1
    current_dir resb 64
    file_count resd 1
    dir_count resd 1
    current_depth resd 1

section .rodata
    HOME_DIRECTORY db "/", 0
    prev_dir_str db "..", 0
    next_dir_str db ".", 0
    dir_separator db "/", 0
    files resb 51200
    directory_tree resb 6400
    MAX_DIR_DEPTH equ 10
    MAX_FILES equ 100
    MAX_FILE_SIZE equ 512
    MAX_CONTENT_LENGTH equ 512
    MAX_DIRNAME_LENGTH equ 64
    LOG_FILE db "log.txt", 0
    CMD_EXIT equ 0
    CMD_CD equ 1
    CMD_MKDIR equ 2
    CMD_RM equ 3
    CMD_LS equ 4
    CMD_EDIT equ 5
    CMD_HELP equ 6
    CMD_CLEAR equ 7
    CMD_LOG equ 8

change_directory:
    push ebp
    mov ebp, esp
    push ebx
    push esi

    mov eax, [prompt_buffer]
    call strtok
    mov ebx, eax

    cmp ebx, 0
    je change_dir_exit

    cmp dword [ebx], 0
    je root_dir

    mov esi, 0
.loop_cd:
    cmp esi, [dir_count]
    jge not_found_cd
    mov eax, esi
    shl eax, 6
    add eax, directory_tree
    push dword [eax]
    push ebx
    call strcmp
    add esp, 8
    cmp eax, 0
    je found_cd
    inc esi
    jmp .loop_cd

found_cd:
    mov ecx, esi
    inc ecx
    mov [current_depth], ecx
    mov eax, esi
    shl eax, 6
    add eax, directory_tree
    push eax
    call strcpy
    add esp, 4
    jmp change_dir_end

root_dir:
    mov dword [current_depth], 0
    mov eax, HOME_DIRECTORY
    push eax
    call strcpy
    add esp, 4

change_dir_end:
    push ebx
    push dword msg_change_dir
    call printf
    add esp, 8
    jmp change_dir_exit

not_found_cd:
    push ebx
    push dword msg_dir_not_found
    call printf
    add esp, 8

change_dir_exit:
    pop esi
    pop ebx
    pop ebp
    ret

create_directory:
    push ebp
    mov ebp, esp
    push ebx
    push esi
    push edi

    mov ebx, [ebp + 8]

    cmp dword [dir_count], 100
    jge max_dirs_reached

    mov eax, [dir_count]
    shl eax, 6
    add eax, directory_tree
    mov edi, eax

    push ebx
    push edi
    add edi, MAX_DIRNAME_LENGTH
    push edi
    call strcpy
    add esp, 12

    inc dword [dir_count]

    push ebx
    push dword msg_dir_created
    call printf
    add esp, 8

    push dword msg_log_create_dir
    call log_action
    add esp, 4

    jmp create_directory_end

max_dirs_reached:
    push dword msg_max_dirs
    call printf
    add esp, 4

create_directory_end:
    pop edi
    pop esi
    pop ebx
    pop ebp
    ret

delete_directory:
    push ebp
    mov ebp, esp
    push ebx
    push esi
    push edi

    mov ebx, [ebp + 8]

    mov esi, 0
.loop_find_dir:
    cmp esi, [dir_count]
    jge not_found_dir
    mov eax, esi
    shl eax, 6
    add eax, directory_tree
    push dword [eax]
    push ebx
    call strcmp
    add esp, 8
    cmp eax, 0
    je found_dir
    inc esi
    jmp .loop_find_dir

found_dir:
    push dword [esi * 4 + file_count]
    call delete_file
    add esp, 4

    mov eax, [dir_count]
    sub eax, 1
    shl eax, 6
    add eax, directory_tree
    add eax, esi
    mov edi, eax

    mov ecx, [dir_count]
    shl ecx, 6
    add ecx, directory_tree
    sub ecx, 64

    mov edx, [dir_count]
    sub edx, esi
    shl edx, 6
    add edx, directory_tree

    rep movsb

    dec dword [dir_count]

    push dword msg_dir_deleted
    call printf
    add esp, 4

    push dword msg_log_delete_dir
    call log_action
    add esp, 4

    jmp delete_directory_end

not_found_dir:
    push ebx
    push dword msg_dir_not_found
    call printf
    add esp, 8

delete_directory_end:
    pop edi
    pop esi
    pop ebx
    pop ebp
    ret

list_files:
    push ebp
    mov ebp, esp
    push ebx
    push esi

    mov esi, 0
.loop_list_files:
    cmp esi, [file_count]
    jge list_files_end
    mov eax, esi
    shl eax, 9
    add eax, files
    push eax
    call printf
    add esp, 4
    inc esi
    jmp .loop_list_files

list_files_end:
    pop esi
    pop ebx
    pop ebp
    ret

delete_file:
    push ebp
    mov ebp, esp
    push ebx
    push esi

    mov ebx, [ebp + 8]

    mov esi, 0
.loop_find_file:
    cmp esi, [file_count]
    jge not_found_file
    mov eax, esi
    shl eax, 9
    add eax, files
    push dword [eax]
    push ebx
    call strcmp
    add esp, 8
    cmp eax, 0
    je found_file
    inc esi
    jmp .loop_find_file

found_file:
    mov edx, [file_count]
    dec edx
    shl edx, 9
    add edx, files
    mov ecx, [file_count]
    shl ecx, 9
    add ecx, files
    sub ecx, 512
    mov eax, [file_count]
    sub eax, esi
    shl eax, 9
    add eax, files
    rep movsb

    dec dword [file_count]

    push dword msg_file_deleted
    call printf
    add esp, 4

    push ebx
    push dword msg_log_delete_file
    call log_action
    add esp, 8

    jmp delete_file_end

not_found_file:
    push ebx
    push dword msg_file_not_found
    call printf
    add esp, 8

delete_file_end:
    pop esi
    pop ebx
    pop ebp
    ret

edit_file:
    push ebp
    mov ebp, esp
    push ebx
    push esi
    push edi

    mov ebx, [ebp + 8]

    mov esi, 0
.loop_find_file_edit:
    cmp esi, [file_count]
    jge not_found_file_edit
    mov eax, esi
    shl eax, 9
    add eax, files
    push dword [eax]
    push ebx
    call strcmp
    add esp, 8
    cmp eax, 0
    je found_file_edit
    inc esi
    jmp .loop_find_file_edit

found_file_edit:
    mov edi, esi
    shl edi, 9
    add edi, files
    mov esi, edi
    add esi, MAX_FILENAME_LENGTH
    mov edi, [prompt_buffer]
    push edi
    call strcpy
    add esp, 4

    push dword msg_enter_content
    call printf
    add esp, 4

    push MAX_CONTENT_LENGTH
    push esi
    push dword stdin
    call fgets
    add esp, 12

    push ebx
    push dword msg_file_edited
    call printf
    add esp, 4

    push ebx
    push dword msg_log_edit_file
    call log_action
    add esp, 4

    jmp edit_file_end

not_found_file_edit:
    push ebx
    push dword msg_file_not_found
    call printf
    add esp, 8

edit_file_end:
    pop edi
    pop esi
    pop ebx
    pop ebp
    ret

access_logs:
    push ebp
    mov ebp, esp
    push ebx
    push esi

    mov eax, LOG_FILE
    push eax
    push dword "r"
    call fopen
    add esp, 8

    test eax, eax
    jz log_file_open_error

    mov [log_file], eax

    push dword msg_log_contents
    call printf
    add esp, 4

.read_log:
    push LOG_BUFFER_SIZE
    push log_buffer
    push dword [log_file]
    call fgets
    add esp, 12

    test eax, eax
    jz .end_of_log

    push log_buffer
    call printf
    add esp, 4

    jmp .read_log

.end_of_log:
    push dword msg_log_end
    call printf
    add esp, 4

    push dword msg_log_close
    call printf
    add esp, 4

    push dword [log_file]
    call fclose
    add esp, 4

    jmp access_logs_exit

log_file_open_error:
    push dword msg_open_log_error
    call printf
    add esp, 4

access_logs_exit:
    pop esi
    pop ebx
    pop ebp
    ret

display_help:
    push ebp
    mov ebp, esp
    push dword help_text
    call printf
    add esp, 4
    pop ebp
    ret

clear_screen:
    push dword "cls"
    call system
    add esp, 4
    push dword msg_clear_screen
    call printf
    add esp, 4
    ret

log_action:
    push ebp
    mov ebp, esp
    push dword log_format
    call printf
    add esp, 4
    push ebp
    push dword [ebp + 8]
    call printf
    add esp, 8
    pop ebp
    ret

main:
    push dword welcome_message
    call printf
    add esp, 4

main_loop:
    push dword prompt_str
    call printf
    add esp, 4

    push dword prompt_buffer
    push dword 256
    push dword stdin
    call fgets
    add esp, 12

    mov eax, [prompt_buffer]
    call strtok
    cmp eax, 0
    je main_loop

    mov ebx, eax

    ; Compare command
    mov eax, ebx
    cmp eax, "cd"
    je command_cd
    mov eax, ebx
    cmp eax, "mkdir"
    je command_mkdir
    mov eax, ebx
    cmp eax, "rm"
    je command_rm
    mov eax, ebx
    cmp eax, "ls"
    je command_ls
    mov eax, ebx
    cmp eax, "edit"
    je command_edit
    mov eax, ebx
    cmp eax, "log"
    je command_log
    mov eax, ebx
    cmp eax, "clear"
    je command_clear
    mov eax, ebx
    cmp eax, "exit"
    je command_exit
    mov eax, ebx
    cmp eax, "help"
    je command_help
    jmp command_invalid

command_cd:
    call change_directory
    jmp main_loop
command_mkdir:
    call create_directory
    jmp main_loop
command_rm:
    call delete_file
    jmp main_loop
command_ls:
    call list_files
    jmp main_loop
command_edit:
    call edit_file
    jmp main_loop
command_log:
    call access_logs
    jmp main_loop
command_clear:
    call clear_screen
    jmp main_loop
command_exit:
    mov eax, 0
    ret
command_help:
    call display_help
    jmp main_loop
command_invalid:
    push dword msg_invalid_command
    call printf
    add esp, 4
    jmp main_loop


    ; Boot signature (0x55, 0xAA)
    times 510-($-$$) db 0   ; Fill the rest of the boot sector with zeros
    dw 0xAA55               ; Boot signature

